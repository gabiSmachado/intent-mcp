# generated by fastapi-codegen:
#   filename:  NetworkSliceBooking.yaml
#   timestamp: 2025-07-13T22:44:24+00:00
from __future__ import annotations

from pydantic import BaseModel, Field, confloat, conint, ConfigDict
from typing import List, Optional,Union,Literal
#from geopy.geocoders import Nominatim
from datetime import datetime
from enum import Enum, StrEnum
from uuid import UUID
# from models.point import Point

from pydantic.version import version_info

print(version_info())

class SessionId(BaseModel):
    session_id: UUID = Field(..., description='Session ID in UUID format')

class TimeUnitEnum(StrEnum):
    Days = 'Days'
    Hours = 'Hours'
    Minutes = 'Minutes'
    Seconds = 'Seconds'
    Milliseconds = 'Milliseconds'
    Microseconds = 'Microseconds'
    Nanoseconds = 'Nanoseconds'

class RateUnitEnum(StrEnum):
    bps = 'bps'
    kbps = 'kbps'
    Mbps = 'Mbps'
    Gbps = 'Gbps'
    Tbps = 'Tbps'

class _ServiceTime(BaseModel):
    StartTime: datetime = Field(...,description='Start the Slice Service From', example='2024-06-01T12:00:00Z')
    EndTime: datetime = Field(..., description='End the Slice Service At', example='2024-06-01T12:00:00Z'
    )

class AreaType(Enum):
    CIRCLE = 'CIRCLE'
    POLYGON = 'POLYGON'

class Duration(BaseModel):
    value: conint(ge=1) = Field(
        None, description='Quantity of duration', example=12
    )
    unit: TimeUnitEnum = Field(..., description='Units of time')

class Rate(BaseModel):
    value: conint(ge=0, le=1024) = Field(
        None, description='Quantity of rate', example=10
    )
    unit: RateUnitEnum = Field(..., description='Units of rate')

class QoSProfile(BaseModel):
    MaxNumofTerminals: conint(ge=1, le=20) = Field(
        ..., description='Number of terminals', example=5
    )
    DLThroughputPerTerminal: Rate = Field(..., description='Specification of Rate')
    ULThroughputPerTerminal: Optional[Rate] = Field(..., description='Specification of Rate')
    DLLatency: Optional[Duration] = Field(
        None,
        description='DLLatency is an attribute specifies the required DL packet transmission latency (millisecond) through the 5G network.',
    )
    ULLatency: Optional[Duration] = Field(
        None,
        description='ULLatency is an attribute specifies the required UL packet transmission latency (millisecond) through the 5G network.',
    )

class Point(BaseModel):
    latitude: float = Field(
        ..., description='Latitude of the location', example=45.754114
    )
    longitude: float = Field(
        ..., description='Longitude of the location',example=4.860374
    )

class Circle(BaseModel):
    areaType: Literal["CIRCLE"] = Field(..., description='areaType name in uppercase')
    center: Point = Field(..., description='Coordinates (latitude, longitude) defining a location in a map')
    radius: confloat(ge=1.0) = Field(
        ..., description='Distance from the center in meters', example=800
    )

class PointList(BaseModel):
    point_list: List[Point] = Field(..., max_length=15, min_length=3)

class Polygon(BaseModel):
    areaType: Literal["POLYGON"] = Field(..., description='areaType name in uppercase')
    boundary: PointList

Area = Union[Circle, Polygon] 

class CreateSession(BaseModel):
    ServiceTime: Optional[_ServiceTime] = None
    ServiceArea: Optional[Area] = None
    QoSProfile: QoSProfile
    
class Session(CreateSession):
    sessionId: UUID


