# generated by fastapi-codegen:
#   filename:  NetworkSliceBooking.yaml
#   timestamp: 2025-07-13T22:44:24+00:00

from __future__ import annotations
from typing import Optional, Union
from uuid import UUID, uuid4
from fastapi import FastAPI, Path, Body, Header,HTTPException, Response
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from fastmcp import FastMCP
from models.models import *
import uvicorn, json, logging, asyncio
from fastmcp.server.openapi import MCPType, RouteMap

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("mcp-server")

app = FastAPI(
    title='network-slice-booking',
    description= "The Network Slice Booking (NSB) API provides programmable interface for developers to reserve a slice resource of a selected area within a period, and manage device access control as needed.",
    version= "0.1.0-rc.1",
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    }
)

sessions = []

@app.post('/sessions',operation_id="create_slice", tags=["users"])
async def create_session(body: CreateSession):
    """
        Create a new session of Network Slice Booking.
    """
    logger.info(f"Creating Network Slice Booking API Session")
    new_id = uuid4()
    
    if body.QoSProfile is None:
        logger.info("Failed to create session. Error: QoSProfile not found")
        raise HTTPException(status_code=400, detail="QoSProfile not found")
    
    info = Session(sessionId=new_id, **dict(body))
    sessions.append(info)
    
    logger.info(f"Session created successfully. ID:{new_id}")
    return  {"session": info, "status_code": '200', "detail": 'Sucess'}


@app.get('/sessions/{sessionId}',operation_id="get_slice",  tags=["users"])
async def get_session(sessionId: UUID):
    """
    Get session information from sessionId
    """
    logger.info(f"Getting Network Slice Booking API Session")

    for session in sessions:
        if session.sessionId == sessionId:
            return {"session": session}
    return {"message": "Session not found."}


@app.get('/sessions/', operation_id="get_all_slices")
async def get_all():
    """
    Get/return/show/list all Network Slice Booking sessions.
    """
    return {"message": sessions}
    #return JSONResponse(content=json.loads(json.dumps({"sessions": sessions}, cls=EnumEncoder)))

# mcp = FastApiMCP(app, include_operations=["get_slice", "create_slice", "get_all_slices"])
# mcp.mount()

# if __name__ == "__main__":
#     uvicorn.run("main:app", port=9100, reload=True)


mcp = FastMCP.from_fastapi(
            app=app,
            route_maps=[
            RouteMap(methods="*", pattern=r".*", mcp_type=MCPType.TOOL, tags={"users"}),
            RouteMap(methods=["GET"], pattern=r".*", mcp_type=MCPType.RESOURCE),
        ],
)

    # tools = await mcp.get_tools()
    # resources = await mcp.get_resources()

    # print(f"Tools ({len(tools)}): {', '.join(tools.keys())}")
    # print(f"Resources ({len(resources)}): {', '.join(resources.keys())}")



#if __name__ == "__main__":
    # try:
    #     logger.info("Starting MCP server...")
    #     mcp.run(
    #         transport="http",
    #         host="127.0.0.1",
    #         port=9100,
    #     )
    # except KeyboardInterrupt:
    #     logger.info("Server shutting down...")